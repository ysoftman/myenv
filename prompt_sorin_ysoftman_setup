#
# A simple theme that displays relevant, contextual information.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Screenshots:
#   http://i.imgur.com/nrGV6pg.png
#

#
# 16 Terminal Colors
# -- ---------------
#  0 black
#  1 red
#  2 green
#  3 yellow
#  4 blue
#  5 magenta
#  6 cyan
#  7 white
#  8 bright black
#  9 bright red
# 10 bright green
# 11 bright yellow
# 12 bright blue
# 13 bright magenta
# 14 bright cyan
# 15 bright white
#

# Load dependencies.
pmodload 'helper'

function prompt_sorin_async_callback {
  case $1 in
    prompt_sorin_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_sorin_git" ]]; then
          _prompt_sorin_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        _prompt_sorin_git="${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
          "[async]")
      # Code is 1 for corrupted worker output and 2 for dead worker.
      if [[ $2 -eq 2 ]]; then
          # Our worker died unexpectedly.
          typeset -g prompt_prezto_async_init=0
      fi
      ;;
  esac
}

function prompt_sorin_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info[status]}
  fi
}

function prompt_sorin_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_sorin_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_sorin -n
    async_register_callback prompt_sorin prompt_sorin_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_sorin

  # Compute slow commands in the background.
  async_job prompt_sorin prompt_sorin_async_git "$PWD"
}



DATE=date
# mac 에서는 gdate 로 nanaoseconds 까지 사용할 수 있다
if [[ $(uname -a | grep -i darwin) ]]; then
  which gdate > /dev/null
  if [ $? -ne 0 ]; then
    echo "install gdate"
    brew install coreutils
  fi
  DATE=gdate
fi

# 명령 실행 전에 실행
function prompt_sorin_preexec {
  # SECONDS 쉘 시작후 초 단위 카운트
  # _command_start_ms=$SECONDS
  # %N nanoseconds -> millisecons 로 끊어 기록
  _command_start_ms=$(($($DATE +%s%0N) / 1000000))
}

# prompt 표시 전에 실행
function prompt_sorin_precmd {
  # 명령 수행 시간 계산
  local _elapsed_ms=0
  local _elapsed_sec=0
  local _elapsed_min=0
  local _elapsed_hour=0
  local _elapsed_str=""
  if [ $_command_start_ms ]; then
    _elapsed_ms=$(( $(($($DATE +%s%0N) / 1000000))-$_command_start_ms ))
    unset _command_start_ms

    _elapsed_sec=$((${_elapsed_ms}/1000))
    _elapsed_ms=$((${_elapsed_ms}%1000))
    _elapsed_min=$((${_elapsed_sec}/60))
    _elapsed_sec=$((${_elapsed_sec}%60))
    _elapsed_hour=$((${_elapsed_min}/60))
    _elapsed_min=$((${_elapsed_min}%60))
    if [ $_elapsed_hour -gt 0 ]; then
      _elapsed_str+="${_elapsed_hour}h "
    fi
    if [ $_elapsed_min -gt 0 ]; then
      _elapsed_str+="${_elapsed_min}m "
    fi
    if [ $_elapsed_sec -gt 0 ]; then
      _elapsed_str+="${_elapsed_sec}s "
    fi
  fi
  _elapsed_str+="${_elapsed_ms}ms"
  # 실행이 오래 걸리는 프로그램도 있기 때문에 프롬프트 표시 전에 다시 현재 시간을 파악한다.
  _curTime=$(date +%H:%M:%S)

  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  # 경로 depth 마다 색 구분, 공백 포함된 디렉토리는 한 색으로 표현
  local cnt=0
  local output=""
  local split_pwd=$(prompt-pwd | sed 's/\//\n/g')
  local originIFS=$IFS
  IFS=$'\n'
  setopt sh_word_split # zsh 에서는 단어 구분을 위해선 설정이 필요하다.
  local patharr=($split_pwd)
  IFS=$originIFS
  unsetopt sh_word_split
  #echo ${#patharr}
  #echo ${patharr}
  # bash 는 0, zsh 는 1이 시작 인덱스다.
  for (( i=1;i<=${#patharr};i++ )) do
      n=$(( ${cnt}%6+1 ))
      color="%F{$n}"
      output="${output}${color}${patharr[$i]}/"
      ((cnt++))
  done
  _prompt_sorin_pwd="${output}"
  _prompt_time=$(echo "[%F{3}${_curTime}%f %F{14}Elapsed(${_elapsed_str})%f]")

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_sorin_cur_git_root ]]; then
      _prompt_sorin_git=''
      _sorin_cur_git_root=$new_git_root
    fi
  fi

  # Run python info (this should be fast and not require any async)
  if (( $+functions[python-info] )); then
    python-info
  fi

  prompt_sorin_async_tasks
}

function prompt_sorin_ysoftman_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_sorin_precmd
  add-zsh-hook preexec prompt_sorin_preexec


  # Tell prezto we can manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Set editor-info parameters.
  # %B start bold
  # %b stop bold
  # %F{컬러이름 또는 번호} start foreground color
  # %f stop foreground color
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{2}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{2}❮%F{3}❮%F{1}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{2}✚%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{13}⬆%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{13}⬇%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %%B%F{2}%b%f%%b'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{1}✖%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{4}✱%f%%b'
  zstyle ':prezto:module:git:info:position' format ' %%B%F{13}%p%f%%b'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{5}➜%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}✭%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{3}═%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{7}◼%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'status' '%b %p %c:%s%A%B%S%a%d%m%r%U%u'

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '%f%F{3}(%v)%F{7} '

  # Set up non-zero return value display
  local show_return="✘ "
  # Default is to show the return value
  if zstyle -T ':prezto:module:prompt' show-return-val; then
    show_return+='%? '
  fi

  # Get the async worker set up.
  _sorin_cur_git_root=''

  # _prompt_sorin_git=''
  # _prompt_sorin_pwd=''


  # 항상 사용자명과 호스트명이 나오도록 수정
  # git 정보 오른쪽(RPROMPT)대신 PROMPT 에 표시
  # 현재 시간 표시
  # 2줄로 구분
  # %n 는 사용자, %m 은 장비명
  NEW_LINE=$'\n'
  PROMPT='%F{4}%n@%m%f ${_prompt_time}'
  PROMPT+='${NEW_LINE}'
  PROMPT+='%F{4}${_prompt_sorin_pwd}%(!. %B%F{1}#%f%b.)${editor_info[keymap]} '
  RPROMPT='$python_info[virtualenv]${editor_info[overwrite]}%(?:: %F{1}'
  RPROMPT+=${show_return}
  RPROMPT+='%f)${VIM:+" %B%F{6}V%f%b"}${_prompt_sorin_git}'
  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

# ~/.zprezto/modules/editor/init.zsh 의 editor-info 함수를 이곳에서 override 한다.
function editor-info {
  # Ensure that we're going to set the editor-info for prompts that
  # are prezto managed and/or compatible.
  if zstyle -t ':prezto:module:prompt' managed; then
    # Clean up previous $editor_info.
    unset editor_info
    typeset -gA editor_info

    if [[ "$KEYMAP" == 'vicmd' ]]; then
      zstyle -s ':prezto:module:editor:info:keymap:alternate' format 'REPLY'
      editor_info[keymap]="$REPLY"
    else
      zstyle -s ':prezto:module:editor:info:keymap:primary' format 'REPLY'
      editor_info[keymap]="$REPLY"

      if [[ "$ZLE_STATE" == *overwrite* ]]; then
        zstyle -s ':prezto:module:editor:info:keymap:primary:overwrite' format 'REPLY'
        editor_info[overwrite]="$REPLY"
      else
        zstyle -s ':prezto:module:editor:info:keymap:primary:insert' format 'REPLY'
        editor_info[overwrite]="$REPLY"
      fi
    fi

    unset REPLY

    # _curTime="%D{%H:%M:%S}"
    # 프롬프트 리셋(이 때 prompt_sorin_precmd 는 호출 되지 않는다.)
    zle zle-reset-prompt
    # 현재 시간 업데이트(이 후 prompt_sorin_precmd 가 호출된다.)
    _curTime=$(date +%H:%M:%S)
  fi
}

function prompt_sorin_ysoftman_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2> /dev/null
  prompt_preview_theme 'sorin_ysoftman'
}

_curTime=$(date +%H:%M:%S)
prompt_sorin_ysoftman_setup "$@"
